import torch
import torch.nn.functional as F
from scipy.optimize import linear_sum_assignment
import warnings
import pytest
from utils import LearnablePermutation

def index_add_with_permutation(
    src: torch.Tensor,
    index: torch.Tensor
    ) -> torch.Tensor:
    """
    Custom index_add operation that permutes src and index based on a learnable permutation matrix.
    
    Args:
        src (torch.Tensor): The source tensor.
        index (torch.Tensor): The index tensor indicating where to add the values.
        perm_matrix (torch.Tensor): A permutation matrix generated by LearnablePermutation.
    
    Returns:
        torch.Tensor: The result of the index add operation after applying the permutation.
    """
    # Get the permutation matrix
    # Ensure src is of the same dtype as perm_matrix
    src = src.float()  # Convert src to float
    in_features = src.size(0)
    perm_matrix = LearnablePermutation(in_features).eval()()
    
    # Permute src
    permuted_src = torch.matmul(perm_matrix, src.unsqueeze(1)).squeeze(1)
    permuted_index = torch.matmul(perm_matrix, index.unsqueeze(1).to(torch.float32)).squeeze(1).to(torch.int64)

    # Initialize the result tensor
    result = torch.zeros_like(src)
    
    # Perform index add
    result.index_add_(0, permuted_index, permuted_src)

    return result

@pytest.mark.parametrize("src, index", [
    (torch.tensor([1.0, 2.0, 3.0, 4.0]), torch.tensor([0, 1, 0, 1], dtype=torch.long)),
    (torch.tensor([5.0, 6.0, 7.0, 8.0]), torch.tensor([1, 0, 1, 0], dtype=torch.long)),
    (torch.tensor([9.0, 10.0, 11.0, 12.0]), torch.tensor([2, 2, 0, 1], dtype=torch.long)),
    (torch.tensor([13.0, 14.0, 15.0, 16.0]), torch.tensor([3, 3, 0, 1], dtype=torch.long)),
])
def test_index_add_with_permutation(src, index):
    # Custom index_add with permutation
    result = index_add_with_permutation(src, index)

    # Expected result using standard index_add
    expected_result = torch.zeros_like(src)
    expected_result.index_add_(0, index, src)

    # Assert equality
    print(result, expected_result)
    assert torch.equal(result, expected_result), f"Test failed for src={src}, index={index}"

